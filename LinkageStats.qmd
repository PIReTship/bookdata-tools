---
title: Book Data Linkage Statistics
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.7
  kernelspec:
    display_name: R
    language: R
    name: ir
---

This notebook presents statistics of the book data integration.

## Setup

```{r}
library(tidyverse, warn.conflicts=FALSE)
library(arrow, warn.conflicts=FALSE)
library(jsonlite)
```

## Load Link Stats

We compute dataset linking statistics as `gender-stats.csv` as part of the integration.  Let's load those:

```{r}
link_stats = read_csv("book-links/gender-stats.csv")
glimpse(link_stats)
```

Now let's define variables for our variou codes. We are first going to define our gender codes.  We'll start with the resolved codes:

```{r}
link_codes = c('female', 'male', 'ambiguous', 'unknown')
```

We want the unlink codes in order, so the last is the first link failure:

```{r}
unlink_codes = c('no-author-rec', 'no-book-author', 'no-book')
```

```{r}
all_codes = c(link_codes, unlink_codes)
```

## Processing Statistics

Now we'll pivot each of our count columns into a table for easier reference.

```{r}
book_counts = link_stats %>%
    pivot_wider(id_cols=dataset, names_from=gender, values_from=n_books) %>%
    replace(is.na(.), 0) %>%
    mutate(total=rowSums(across(-dataset)))
glimpse(book_counts)
```

```{r}
act_counts = link_stats %>%
    filter(dataset != "LOC-MDS") %>%
    pivot_wider(id_cols=dataset, names_from=gender, values_from=n_actions) %>%
    replace(is.na(.), 0) %>%
    mutate(total=rowSums(across(-dataset)))
glimpse(act_counts)
```

We're going to want to compute versions of this table as fractions, e.g. the fraction of books that are written by women.  We will use the following helper function:

```{r}
fractionalize = function(data, columns, unlinked=NULL) {
    fracs = select(data, dataset | all_of(columns))
    if (!is.null(unlinked)) {
        fracs = mutate(fracs, unlinked=rowSums(select(data, all_of(columns))))
    }
    totals = rowSums(select(fracs, !dataset))
    fracs %>% mutate(across(!dataset, ~ .x / totals))
}
fractionalize(book_counts, link_codes) %>% glimpse()
```

And a helper function for plotting bar charts:

```{r}
plot_bars = function(data) {
    tall = data %>%
        pivot_longer(!dataset, names_to="status", values_to="fraction")
    codes = c(all_codes, "unlinked")
    codes = intersect(codes, unique(tall$status))
    tall = tall %>% mutate(status=ordered(status, codes))
    ggplot(tall) +
        aes(y=dataset, x=fraction, fill=status) +
        geom_col(position=position_stack(reverse=TRUE)) +
        geom_text(aes(label=sprintf("%.1f%%", fraction * 100)),
                  position=position_stack(reverse=TRUE, vjust=0.5),
                  colour="white", fontface="bold") +
        scale_fill_brewer(type="qual", palette="Dark2")
}
```

## Resolution of Books

What fraction of *unique books* are resolved from each source?

```{r}
book_counts %>% fractionalize(all_codes)
```

```{r}
book_counts %>% fractionalize(all_codes) %>% plot_bars()
```

```{r}
book_counts %>% fractionalize(link_codes, unlink_codes)
```

```{r}
book_counts %>% fractionalize(link_codes, unlink_codes) %>% plot_bars()
```

```{r}
book_counts %>% fractionalize(c('female', 'male')) %>% plot_bars()
```

## Resolution of Ratings

What fraction of *rating actions* have each resolution result?

```{r}
act_counts %>% fractionalize(all_codes)
```

```{r}
act_counts %>% fractionalize(all_codes) %>% plot_bars()
```

```{r}
act_counts %>% fractionalize(link_codes, unlink_codes)
```

```{r}
act_counts %>% fractionalize(link_codes, unlink_codes) %>% plot_bars()
```

```{r}
act_counts %>% fractionalize(c('female', 'male')) %>% plot_bars()
```

## Metrics

Finally, we're going to write coverage metrics.

```{r}
book_linked = eval(quote(male + female + ambiguous), envir=book_counts)
book_coverage = book_linked / book_stats$total
book_coverage = setNames(book_coverage, book_stats$dataset)
book_coverage
```


```{r}
json = toJSON(
    as.list(book_coverage),
    auto_unbox=TRUE,
)
write_file(json, "book-coverage.json")
```

